// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: channelIm.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "ChannelIm.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - ChannelImRoot

@implementation ChannelImRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - ChannelImRoot_FileDescriptor

static GPBFileDescriptor *ChannelImRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"uyujoy.api.channelim.frontend"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - channelMsgRecord

@implementation channelMsgRecord

@dynamic msgId;
@dynamic msgFp;
@dynamic from;
@dynamic channelId;
@dynamic msg;
@dynamic sendTime;
@dynamic lang;

typedef struct channelMsgRecord__storage_ {
  uint32_t _has_storage_[1];
  uint32_t msgId;
  NSString *msgFp;
  NSString *from;
  NSString *channelId;
  NSString *msg;
  NSString *lang;
  int64_t sendTime;
} channelMsgRecord__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "msgId",
        .dataTypeSpecific.className = NULL,
        .number = channelMsgRecord_FieldNumber_MsgId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(channelMsgRecord__storage_, msgId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "msgFp",
        .dataTypeSpecific.className = NULL,
        .number = channelMsgRecord_FieldNumber_MsgFp,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(channelMsgRecord__storage_, msgFp),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "from",
        .dataTypeSpecific.className = NULL,
        .number = channelMsgRecord_FieldNumber_From,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(channelMsgRecord__storage_, from),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "channelId",
        .dataTypeSpecific.className = NULL,
        .number = channelMsgRecord_FieldNumber_ChannelId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(channelMsgRecord__storage_, channelId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "msg",
        .dataTypeSpecific.className = NULL,
        .number = channelMsgRecord_FieldNumber_Msg,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(channelMsgRecord__storage_, msg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sendTime",
        .dataTypeSpecific.className = NULL,
        .number = channelMsgRecord_FieldNumber_SendTime,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(channelMsgRecord__storage_, sendTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "lang",
        .dataTypeSpecific.className = NULL,
        .number = channelMsgRecord_FieldNumber_Lang,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(channelMsgRecord__storage_, lang),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[channelMsgRecord class]
                                     rootClass:[ChannelImRoot class]
                                          file:ChannelImRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(channelMsgRecord__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001\005\000\002\005\000\004\t\000\006\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - channelMsgRecordAck

@implementation channelMsgRecordAck

@dynamic msgId;
@dynamic fp;

typedef struct channelMsgRecordAck__storage_ {
  uint32_t _has_storage_[1];
  uint32_t msgId;
  NSString *fp;
} channelMsgRecordAck__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "msgId",
        .dataTypeSpecific.className = NULL,
        .number = channelMsgRecordAck_FieldNumber_MsgId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(channelMsgRecordAck__storage_, msgId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "fp",
        .dataTypeSpecific.className = NULL,
        .number = channelMsgRecordAck_FieldNumber_Fp,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(channelMsgRecordAck__storage_, fp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[channelMsgRecordAck class]
                                     rootClass:[ChannelImRoot class]
                                          file:ChannelImRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(channelMsgRecordAck__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\005\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - rcvChannelMsgRecord

@implementation rcvChannelMsgRecord

@dynamic hasMsg, msg;

typedef struct rcvChannelMsgRecord__storage_ {
  uint32_t _has_storage_[1];
  channelMsgRecord *msg;
} rcvChannelMsgRecord__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "msg",
        .dataTypeSpecific.className = GPBStringifySymbol(channelMsgRecord),
        .number = rcvChannelMsgRecord_FieldNumber_Msg,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(rcvChannelMsgRecord__storage_, msg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[rcvChannelMsgRecord class]
                                     rootClass:[ChannelImRoot class]
                                          file:ChannelImRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(rcvChannelMsgRecord__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - getDiffChannelMsgRecord

@implementation getDiffChannelMsgRecord

@dynamic msgId;
@dynamic channelId;

typedef struct getDiffChannelMsgRecord__storage_ {
  uint32_t _has_storage_[1];
  uint32_t msgId;
  NSString *channelId;
} getDiffChannelMsgRecord__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "msgId",
        .dataTypeSpecific.className = NULL,
        .number = getDiffChannelMsgRecord_FieldNumber_MsgId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(getDiffChannelMsgRecord__storage_, msgId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "channelId",
        .dataTypeSpecific.className = NULL,
        .number = getDiffChannelMsgRecord_FieldNumber_ChannelId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(getDiffChannelMsgRecord__storage_, channelId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[getDiffChannelMsgRecord class]
                                     rootClass:[ChannelImRoot class]
                                          file:ChannelImRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(getDiffChannelMsgRecord__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\005\000\002\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - getDiffChannelMsgRecordAck

@implementation getDiffChannelMsgRecordAck

@dynamic listArray, listArray_Count;

typedef struct getDiffChannelMsgRecordAck__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *listArray;
} getDiffChannelMsgRecordAck__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(channelMsgRecord),
        .number = getDiffChannelMsgRecordAck_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(getDiffChannelMsgRecordAck__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[getDiffChannelMsgRecordAck class]
                                     rootClass:[ChannelImRoot class]
                                          file:ChannelImRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(getDiffChannelMsgRecordAck__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
