// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: consts.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "Consts.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - ConstsRoot

@implementation ConstsRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - Enum channelState

GPBEnumDescriptor *channelState_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "ChannelStateClosed\000ChannelStateFree\000Chan"
        "nelStateBusy\000ChannelStateInsufficientBal"
        "ance\000";
    static const int32_t values[] = {
        channelState_ChannelStateClosed,
        channelState_ChannelStateFree,
        channelState_ChannelStateBusy,
        channelState_ChannelStateInsufficientBalance,
    };
    static const char *extraTextFormatInfo = "\004\000\022\000\001\020\000\002\020\000\003\037\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(channelState)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:channelState_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
//      [worker release];
    }
  }
  return descriptor;
}

BOOL channelState_IsValidValue(int32_t value__) {
  switch (value__) {
    case channelState_ChannelStateClosed:
    case channelState_ChannelStateFree:
    case channelState_ChannelStateBusy:
    case channelState_ChannelStateInsufficientBalance:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum channelStopReason

GPBEnumDescriptor *channelStopReason_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "ChannelStopReasonUnknown\000ChannelStopReas"
        "onNormal\000ChannelStopReasonClosedBySystem"
        "\000ChannelStopReasonError\000";
    static const int32_t values[] = {
        channelStopReason_ChannelStopReasonUnknown,
        channelStopReason_ChannelStopReasonNormal,
        channelStopReason_ChannelStopReasonClosedBySystem,
        channelStopReason_ChannelStopReasonError,
    };
    static const char *extraTextFormatInfo = "\004\000\030\000\001\027\000\002\037\000\003\026\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(channelStopReason)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:channelStopReason_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
//      [worker release];
    }
  }
  return descriptor;
}

BOOL channelStopReason_IsValidValue(int32_t value__) {
  switch (value__) {
    case channelStopReason_ChannelStopReasonUnknown:
    case channelStopReason_ChannelStopReasonNormal:
    case channelStopReason_ChannelStopReasonClosedBySystem:
    case channelStopReason_ChannelStopReasonError:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum channelUserKickReason

GPBEnumDescriptor *channelUserKickReason_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "ChannelUserKickReasonNormal\000ChannelUserK"
        "ickReasonKickBySystem\000ChannelUserKickRea"
        "sonError\000";
    static const int32_t values[] = {
        channelUserKickReason_ChannelUserKickReasonNormal,
        channelUserKickReason_ChannelUserKickReasonKickBySystem,
        channelUserKickReason_ChannelUserKickReasonError,
    };
    static const char *extraTextFormatInfo = "\003\000\033\000\001\037\002\000\002\032\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(channelUserKickReason)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:channelUserKickReason_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
//      [worker release];
    }
  }
  return descriptor;
}

BOOL channelUserKickReason_IsValidValue(int32_t value__) {
  switch (value__) {
    case channelUserKickReason_ChannelUserKickReasonNormal:
    case channelUserKickReason_ChannelUserKickReasonKickBySystem:
    case channelUserKickReason_ChannelUserKickReasonError:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum channelCategory

GPBEnumDescriptor *channelCategory_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "ChannelCategoryUnknown\000ChannelCategorySi"
        "ngle\000ChannelCategoryMultiple\000";
    static const int32_t values[] = {
        channelCategory_ChannelCategoryUnknown,
        channelCategory_ChannelCategorySingle,
        channelCategory_ChannelCategoryMultiple,
    };
    static const char *extraTextFormatInfo = "\003\000\026\000\001\025\000\002\027\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(channelCategory)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:channelCategory_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
//      [worker release];
    }
  }
  return descriptor;
}

BOOL channelCategory_IsValidValue(int32_t value__) {
  switch (value__) {
    case channelCategory_ChannelCategoryUnknown:
    case channelCategory_ChannelCategorySingle:
    case channelCategory_ChannelCategoryMultiple:
      return YES;
    default:
      return NO;
  }
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
